{
    "contents" : "fte_theme <- function (palate_color = \"Greys\") {\n        \n        #display.brewer.all(n=9,type=\"seq\",exact.n=TRUE)\n        palate <- brewer.pal(palate_color, n=9)\n        color.background = palate[2]\n        color.grid.minor = palate[3]\n        color.grid.major = palate[3]\n        color.axis.text = palate[6]\n        color.axis.title = palate[7]\n        color.title = palate[9]\n        #color.title = \"#2c3e50\"\n        \n        font.title <- \"Source Sans Pro\"\n        font.axis <- \"Open Sans Condensed Bold\"\n        #font.axis <- \"M+ 1m regular\"\n        #font.title <- \"Arial\"\n        #font.axis <- \"Arial\"\n        \n        \n        theme_bw(base_size=9) +\n                # Set the entire chart region to a light gray color\n                theme(panel.background=element_rect(fill=color.background, color=color.background)) +\n                theme(plot.background=element_rect(fill=color.background, color=color.background)) +\n                theme(panel.border=element_rect(color=color.background)) +\n                # Format the grid\n                theme(panel.grid.major=element_line(color=color.grid.major,size=.25)) +\n                theme(panel.grid.minor=element_blank()) +\n                #scale_x_continuous(minor_breaks=0,breaks=seq(0,100,10),limits=c(0,100)) +\n                #scale_y_continuous(minor_breaks=0,breaks=seq(0,26,4),limits=c(0,25)) +\n                theme(axis.ticks=element_blank()) +\n                # Dispose of the legend\n                theme(legend.position=\"none\") +\n                theme(legend.background = element_rect(fill=color.background)) +\n                theme(legend.text = element_text(size=7,colour=color.axis.title,family=font.axis)) +\n                # Set title and axis labels, and format these and tick marks\n                theme(plot.title=element_text(colour=color.title,family=font.title, size=9, vjust=1.25, lineheight=0.1)) +\n                theme(axis.text.x=element_text(size=7,colour=color.axis.text,family=font.axis)) +\n                theme(axis.text.y=element_text(size=7,colour=color.axis.text,family=font.axis)) +\n                theme(axis.title.y=element_text(size=7,colour=color.axis.title,family=font.title, vjust=1.25)) +\n                theme(axis.title.x=element_text(size=7,colour=color.axis.title,family=font.title, vjust=0)) +\n                \n                # Big bold line at y=0\n                #geom_hline(yintercept=0,size=0.75,colour=palate[9]) +\n                # Plot margins and finally line annotations\n                theme(plot.margin = unit(c(0.35, 0.2, 0.15, 0.4), \"cm\")) +\n                \n                theme(strip.background = element_rect(fill=color.background, color=color.background),strip.text=element_text(size=7,colour=color.axis.title,family=font.title))\n        \n}\n\nlibrary(readr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(extrafont)\nlibrary(scales)\nlibrary(grid)\nlibrary(RColorBrewer)\nlibrary(digest)\nlibrary(readr)\nlibrary(stringr)\n\n\nfontFamily <- \"Source Sans Pro\"\nfontTitle <- \"Source Sans Pro Semibold\"\n\ncolor_palette = c(\"#16a085\",\"#27ae60\",\"#2980b9\",\"#8e44ad\",\"#f39c12\",\"#c0392b\",\"#1abc9c\", \"#2ecc71\", \"#3498db\", \"#9b59b6\", \"#f1c40f\",\"#e74c3c\")\n\nneutral_colors = function(number) {\n        return (brewer.pal(11, \"RdYlBu\")[-c(5:7)][(number %% 8) + 1])\n}\n\nset1_colors = function(number) {\n        return (brewer.pal(9, \"Set1\")[c(-6,-8)][(number %% 7) + 1])\n}\n\ntheme_custom <- function() {theme_bw(base_size = 8) + \n                                    theme(panel.background = element_rect(fill=\"#eaeaea\"),\n                                          plot.background = element_rect(fill=\"white\"),\n                                          panel.grid.minor = element_blank(),\n                                          panel.grid.major = element_line(color=\"#dddddd\"),\n                                          axis.ticks.x = element_blank(),\n                                          axis.ticks.y = element_blank(),\n                                          axis.title.x = element_text(family=fontTitle, size=8, vjust=-.3),\n                                          axis.title.y = element_text(family=fontTitle, size=8, vjust=1.5),\n                                          panel.border = element_rect(color=\"#cccccc\"),\n                                          text = element_text(color = \"#1a1a1a\", family=fontFamily),\n                                          plot.margin = unit(c(0.25,0.1,0.30,0.35), \"cm\"),\n                                          plot.title = element_text(family=fontTitle, size=9, vjust=1))                          \n}\n\ncreate_watermark <- function(source = '', filename = '', dark=F) {\n        \n        symbols <- c('','', '', '')\n        symbol <- symbols[strtoi(substr(digest(filename),1,6), base=36) %% length(symbols)]\n        if (length(symbol)==0) symbol <- symbols[1]\n        \n        bg_white = \"#F0F0F0\"\n        bg_text = '#969696'\n        \n        if (dark) {\n                bg_white = \"#000000\"\n                bg_text = '#666666'\n        }\n        \n        watermark <- ggplot(aes(x,y), data=data.frame(x=c(0.5), y=c(0.5))) + geom_point(color = \"transparent\") +\n                geom_text(x=0, y=0.9, label=\"x\", family=\"Source Sans Pro\", color=bg_text, size=1.75, hjust=0) +\n                \n                geom_text(x=5, y=0.9, label=\"x\", family=\"Source Sans Pro\", color=bg_text, size=1.75) +\n                #geom_text(x=0, y=1.01, label = symbol, family = 'FontAwesome', color=bg_text, size=2) +\n                #geom_text(x=8, y=1, label = \"via FiveThirtyEight\", family=\"M+ 1m light\", color=\"white\") +\n                scale_x_continuous(limits=c(0,10)) +\n                scale_y_continuous(limits=c(0.5,1.5)) +\n                annotate(\"segment\", x = 0, xend = 10, y=1.5, yend=1.5, color=bg_text, size=0.1) +\n                theme_bw() +\n                theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = \"none\",\n                      panel.border = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank(), axis.title.x = element_blank(), axis.title.y = element_blank(),\n                      axis.ticks = element_blank(), plot.margin = unit(c(0.1,0,-0.4,0), \"cm\")) +\n                theme(plot.background=element_rect(fill=bg_white, color=bg_white),panel.background=element_rect(fill=bg_white, color=bg_white)) +\n                scale_color_manual(values=bg_text)\n        \n        if (nchar(source) > 0) {watermark <- watermark + geom_text(x=10, y=0.9, label=paste(\"\",source), family=\"Source Sans Pro\", color=bg_text, size=1.75, hjust=1)}\n        \n        return (watermark)\n}\n\nweb_Layout <- grid.layout(nrow = 2, ncol = 1, heights = unit(c(2,\n                                                               0.125), c(\"null\", \"null\")), )\ntallweb_Layout <- grid.layout(nrow = 2, ncol = 1, heights = unit(c(3.5,\n                                                                   0.125), c(\"null\", \"null\")), )\nvideo_Layout <- grid.layout(nrow = 1, ncol = 2, widths = unit(c(2,\n                                                                1), c(\"null\", \"null\")), )\n\n#grid.show.layout(Layout)\nvplayout <- function(...) {\n        grid.newpage()\n        pushViewport(viewport(layout = web_Layout))\n}\n\ntalllayout <- function(...) {\n        grid.newpage()\n        pushViewport(viewport(layout = tallweb_Layout))\n}\n\nvidlayout <- function(...) {\n        grid.newpage()\n        pushViewport(viewport(layout = video_Layout))\n}\n\nsubplot <- function(x, y) viewport(layout.pos.row = x,\n                                   layout.pos.col = y)\n\nweb_plot <- function(a, b) {\n        vplayout()\n        print(a, vp = subplot(1, 1))\n        print(b, vp = subplot(2, 1))\n}\n\ntallweb_plot <- function(a, b) {\n        talllayout()\n        print(a, vp = subplot(1, 1))\n        print(b, vp = subplot(2, 1))\n}\n\nvideo_plot <- function(a, b) {\n        vidlayout()\n        print(a, vp = subplot(1, 1))\n        print(b, vp = subplot(1, 2))\n}\n\nmax_save <- function(plot1, filename, source = '', pdf = FALSE, w=4, h=3, tall=F, dark=F) {\n        png(paste(filename,\"png\",sep=\".\"),res=300,units=\"in\",width=w,height=h)\n        ifelse(tall,tallweb_plot(plot1,create_watermark(source, filename, dark)),web_plot(plot1,create_watermark(source, filename, dark)))\n        dev.off()\n        \n        if (pdf) {\n                quartz(width=w,height=h,dpi=144)\n                web_plot(plot1,create_watermark(source, filename, dark))\n                quartz.save(paste(filename,\"pdf\",sep=\".\"), type = \"pdf\", device = dev.cur())\n        }\n}\n\nvideo_save <- function(plot1, plot2, filename) {\n        png(paste(filename,\"png\",sep=\".\"),res=300,units=\"in\",width=1920/300,height=1080/300)\n        video_plot(plot1,plot2)\n        dev.off()\n        \n}\n\nfte_theme <- function (palate_color = \"Greys\") {\n        \n        #display.brewer.all(n=9,type=\"seq\",exact.n=TRUE)\n        palate <- brewer.pal(palate_color, n=9)\n        color.background = palate[2]\n        color.grid.minor = palate[3]\n        color.grid.major = palate[3]\n        color.axis.text = palate[6]\n        color.axis.title = palate[7]\n        color.title = palate[9]\n        #color.title = \"#2c3e50\"\n        \n        font.title <- \"Source Sans Pro\"\n        font.axis <- \"Open Sans Condensed Bold\"\n        #font.axis <- \"M+ 1m regular\"\n        #font.title <- \"Arial\"\n        #font.axis <- \"Arial\"\n        \n        \n        theme_bw(base_size=9) +\n                # Set the entire chart region to a light gray color\n                theme(panel.background=element_rect(fill=color.background, color=color.background)) +\n                theme(plot.background=element_rect(fill=color.background, color=color.background)) +\n                theme(panel.border=element_rect(color=color.background)) +\n                # Format the grid\n                theme(panel.grid.major=element_line(color=color.grid.major,size=.25)) +\n                theme(panel.grid.minor=element_blank()) +\n                #scale_x_continuous(minor_breaks=0,breaks=seq(0,100,10),limits=c(0,100)) +\n                #scale_y_continuous(minor_breaks=0,breaks=seq(0,26,4),limits=c(0,25)) +\n                theme(axis.ticks=element_blank()) +\n                # Dispose of the legend\n                theme(legend.position=\"none\") +\n                theme(legend.background = element_rect(fill=color.background)) +\n                theme(legend.text = element_text(size=7,colour=color.axis.title,family=font.axis)) +\n                # Set title and axis labels, and format these and tick marks\n                theme(plot.title=element_text(colour=color.title,family=font.title, size=9, vjust=1.25, lineheight=0.1)) +\n                theme(axis.text.x=element_text(size=7,colour=color.axis.text,family=font.axis)) +\n                theme(axis.text.y=element_text(size=7,colour=color.axis.text,family=font.axis)) +\n                theme(axis.title.y=element_text(size=7,colour=color.axis.title,family=font.title, vjust=1.25)) +\n                theme(axis.title.x=element_text(size=7,colour=color.axis.title,family=font.title, vjust=0)) +\n                \n                # Big bold line at y=0\n                #geom_hline(yintercept=0,size=0.75,colour=palate[9]) +\n                # Plot margins and finally line annotations\n                theme(plot.margin = unit(c(0.35, 0.2, 0.15, 0.4), \"cm\")) +\n                \n                theme(strip.background = element_rect(fill=color.background, color=color.background),strip.text=element_text(size=7,colour=color.axis.title,family=font.title))\n        \n}",
    "created" : 1444773697443.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "498961106",
    "id" : "11E28C52",
    "lastKnownWriteTime" : 1444787615,
    "path" : "~/_data/Kaggle_Reddit/theme.R",
    "project_path" : "theme.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}